// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_bench.proto

#include "metadata_bench.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fstore_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ConnectionConfig_metadata_5fstore_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillEdges_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillNodes_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillTypes_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitStore_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalDistribution_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadEdges_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadNodes_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadTypes_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadEnv_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformDistribution_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Workload_metadata_5fbench_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_metadata_5fbench_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkloadResult_metadata_5fbench_2eproto;
namespace ml_metadata {
class MLMDBenchConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MLMDBenchConfig> _instance;
} _MLMDBenchConfig_default_instance_;
class UniformDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UniformDistribution> _instance;
} _UniformDistribution_default_instance_;
class NormalDistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NormalDistribution> _instance;
} _NormalDistribution_default_instance_;
class InitStoreDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitStore> _instance;
} _InitStore_default_instance_;
class FillTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FillTypes> _instance;
} _FillTypes_default_instance_;
class FillNodesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FillNodes> _instance;
} _FillNodes_default_instance_;
class FillEdgesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FillEdges> _instance;
} _FillEdges_default_instance_;
class ReadTypesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadTypes> _instance;
} _ReadTypes_default_instance_;
class ReadNodesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadNodes> _instance;
} _ReadNodes_default_instance_;
class ReadEdgesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadEdges> _instance;
} _ReadEdges_default_instance_;
class WorkloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Workload> _instance;
  const ::ml_metadata::InitStore* init_store_;
  const ::ml_metadata::FillTypes* fill_types_;
  const ::ml_metadata::FillNodes* fill_nodes_;
  const ::ml_metadata::FillEdges* fill_edges_;
  const ::ml_metadata::ReadTypes* read_types_;
  const ::ml_metadata::ReadNodes* read_nodes_;
  const ::ml_metadata::ReadEdges* read_edges_;
} _Workload_default_instance_;
class ThreadEnvDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThreadEnv> _instance;
} _ThreadEnv_default_instance_;
class MLMDBenchReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MLMDBenchReport> _instance;
} _MLMDBenchReport_default_instance_;
class WorkloadResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorkloadResult> _instance;
} _WorkloadResult_default_instance_;
}  // namespace ml_metadata
static void InitDefaultsscc_info_FillEdges_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_FillEdges_default_instance_;
    new (ptr) ::ml_metadata::FillEdges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::FillEdges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillEdges_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FillEdges_metadata_5fbench_2eproto}, {
      &scc_info_NormalDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_FillNodes_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_FillNodes_default_instance_;
    new (ptr) ::ml_metadata::FillNodes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::FillNodes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillNodes_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FillNodes_metadata_5fbench_2eproto}, {
      &scc_info_UniformDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_FillTypes_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_FillTypes_default_instance_;
    new (ptr) ::ml_metadata::FillTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::FillTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FillTypes_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FillTypes_metadata_5fbench_2eproto}, {
      &scc_info_UniformDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_InitStore_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_InitStore_default_instance_;
    new (ptr) ::ml_metadata::InitStore();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::InitStore::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitStore_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitStore_metadata_5fbench_2eproto}, {
      &scc_info_ConnectionConfig_metadata_5fstore_2eproto.base,}};

static void InitDefaultsscc_info_MLMDBenchConfig_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_MLMDBenchConfig_default_instance_;
    new (ptr) ::ml_metadata::MLMDBenchConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::MLMDBenchConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MLMDBenchConfig_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MLMDBenchConfig_metadata_5fbench_2eproto}, {
      &scc_info_ConnectionConfig_metadata_5fstore_2eproto.base,
      &scc_info_Workload_metadata_5fbench_2eproto.base,
      &scc_info_ThreadEnv_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_MLMDBenchReport_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_MLMDBenchReport_default_instance_;
    new (ptr) ::ml_metadata::MLMDBenchReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::MLMDBenchReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MLMDBenchReport_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MLMDBenchReport_metadata_5fbench_2eproto}, {
      &scc_info_WorkloadResult_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_NormalDistribution_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_NormalDistribution_default_instance_;
    new (ptr) ::ml_metadata::NormalDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::NormalDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NormalDistribution_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NormalDistribution_metadata_5fbench_2eproto}, {}};

static void InitDefaultsscc_info_ReadEdges_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_ReadEdges_default_instance_;
    new (ptr) ::ml_metadata::ReadEdges();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::ReadEdges::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadEdges_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadEdges_metadata_5fbench_2eproto}, {
      &scc_info_NormalDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_ReadNodes_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_ReadNodes_default_instance_;
    new (ptr) ::ml_metadata::ReadNodes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::ReadNodes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadNodes_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadNodes_metadata_5fbench_2eproto}, {
      &scc_info_UniformDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_ReadTypes_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_ReadTypes_default_instance_;
    new (ptr) ::ml_metadata::ReadTypes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::ReadTypes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReadTypes_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReadTypes_metadata_5fbench_2eproto}, {
      &scc_info_UniformDistribution_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_ThreadEnv_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_ThreadEnv_default_instance_;
    new (ptr) ::ml_metadata::ThreadEnv();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::ThreadEnv::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThreadEnv_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThreadEnv_metadata_5fbench_2eproto}, {}};

static void InitDefaultsscc_info_UniformDistribution_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_UniformDistribution_default_instance_;
    new (ptr) ::ml_metadata::UniformDistribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::UniformDistribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UniformDistribution_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UniformDistribution_metadata_5fbench_2eproto}, {}};

static void InitDefaultsscc_info_Workload_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_Workload_default_instance_;
    new (ptr) ::ml_metadata::Workload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::Workload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Workload_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Workload_metadata_5fbench_2eproto}, {
      &scc_info_InitStore_metadata_5fbench_2eproto.base,
      &scc_info_FillTypes_metadata_5fbench_2eproto.base,
      &scc_info_FillNodes_metadata_5fbench_2eproto.base,
      &scc_info_FillEdges_metadata_5fbench_2eproto.base,
      &scc_info_ReadTypes_metadata_5fbench_2eproto.base,
      &scc_info_ReadNodes_metadata_5fbench_2eproto.base,
      &scc_info_ReadEdges_metadata_5fbench_2eproto.base,}};

static void InitDefaultsscc_info_WorkloadResult_metadata_5fbench_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ml_metadata::_WorkloadResult_default_instance_;
    new (ptr) ::ml_metadata::WorkloadResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ml_metadata::WorkloadResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorkloadResult_metadata_5fbench_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorkloadResult_metadata_5fbench_2eproto}, {
      &scc_info_Workload_metadata_5fbench_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_metadata_5fbench_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_metadata_5fbench_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_metadata_5fbench_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_metadata_5fbench_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchConfig, mlmd_config_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchConfig, workloads_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchConfig, thread_env_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UniformDistribution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UniformDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UniformDistribution, range_begin_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::UniformDistribution, range_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::NormalDistribution, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::NormalDistribution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::NormalDistribution, coefficient_of_variation_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::InitStore, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::InitStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::InitStore, mlmd_config_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillTypes, update_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillTypes, num_properties_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillNodes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillNodes, update_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillNodes, num_properties_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillEdges, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillEdges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillEdges, bipartite_distribution1_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::FillEdges, bipartite_distribution2_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadTypes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadTypes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadTypes, num_properties_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadNodes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadNodes, num_properties_),
  0,
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadEdges, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadEdges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadEdges, bipartite_distribution1_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ReadEdges, bipartite_distribution2_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Workload, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Workload, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, init_store_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, fill_types_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, fill_nodes_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, fill_edges_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, read_types_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, read_nodes_),
  offsetof(::ml_metadata::WorkloadDefaultTypeInternal, read_edges_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::Workload, workloads_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ThreadEnv, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ThreadEnv, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::ThreadEnv, thread_num_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::MLMDBenchReport, summaries_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::WorkloadResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::WorkloadResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ml_metadata::WorkloadResult, workload_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::WorkloadResult, microsecond_per_op_),
  PROTOBUF_FIELD_OFFSET(::ml_metadata::WorkloadResult, bytes_per_second_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::ml_metadata::MLMDBenchConfig)},
  { 11, 18, sizeof(::ml_metadata::UniformDistribution)},
  { 20, 26, sizeof(::ml_metadata::NormalDistribution)},
  { 27, 33, sizeof(::ml_metadata::InitStore)},
  { 34, 41, sizeof(::ml_metadata::FillTypes)},
  { 43, 50, sizeof(::ml_metadata::FillNodes)},
  { 52, 59, sizeof(::ml_metadata::FillEdges)},
  { 61, 67, sizeof(::ml_metadata::ReadTypes)},
  { 68, 74, sizeof(::ml_metadata::ReadNodes)},
  { 75, 82, sizeof(::ml_metadata::ReadEdges)},
  { 84, -1, sizeof(::ml_metadata::Workload)},
  { 97, 103, sizeof(::ml_metadata::ThreadEnv)},
  { 104, -1, sizeof(::ml_metadata::MLMDBenchReport)},
  { 110, 118, sizeof(::ml_metadata::WorkloadResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_MLMDBenchConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_UniformDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_NormalDistribution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_InitStore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_FillTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_FillNodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_FillEdges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_ReadTypes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_ReadNodes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_ReadEdges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_Workload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_ThreadEnv_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_MLMDBenchReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ml_metadata::_WorkloadResult_default_instance_),
};

const char descriptor_table_protodef_metadata_5fbench_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024metadata_bench.proto\022\013ml_metadata\032\024met"
  "adata_store.proto\"\233\001\n\017MLMDBenchConfig\0222\n"
  "\013mlmd_config\030\001 \001(\0132\035.ml_metadata.Connect"
  "ionConfig\022(\n\tworkloads\030\002 \003(\0132\025.ml_metada"
  "ta.Workload\022*\n\nthread_env\030\003 \001(\0132\026.ml_met"
  "adata.ThreadEnv\"D\n\023UniformDistribution\022\026"
  "\n\013range_begin\030\001 \001(\005:\0011\022\025\n\trange_end\030\002 \001("
  "\005:\00210\"9\n\022NormalDistribution\022#\n\030coefficie"
  "nt_of_variation\030\001 \001(\005:\0015\"\?\n\tInitStore\0222\n"
  "\013mlmd_config\030\001 \001(\0132\035.ml_metadata.Connect"
  "ionConfig\"\243\001\n\tFillTypes\022\025\n\006update\030\001 \001(\010:"
  "\005false\0228\n\016num_properties\030\002 \001(\0132 .ml_meta"
  "data.UniformDistribution\"E\n\rspecificatio"
  "n\022\020\n\014ArtifactType\020\000\022\021\n\rExecutionType\020\001\022\017"
  "\n\013ContextType\020\002\"\227\001\n\tFillNodes\022\025\n\006update\030"
  "\001 \001(\010:\005false\0228\n\016num_properties\030\002 \001(\0132 .m"
  "l_metadata.UniformDistribution\"9\n\rspecif"
  "ication\022\014\n\010Artifact\020\000\022\r\n\tExecution\020\001\022\013\n\007"
  "Context\020\002\"\315\001\n\tFillEdges\022@\n\027bipartite_dis"
  "tribution1\030\001 \001(\0132\037.ml_metadata.NormalDis"
  "tribution\022@\n\027bipartite_distribution2\030\002 \001"
  "(\0132\037.ml_metadata.NormalDistribution\"<\n\rs"
  "pecification\022\t\n\005Event\020\000\022\017\n\013Attribution\020\001"
  "\022\017\n\013Association\020\002\"\230\001\n\tReadTypes\0228\n\016num_p"
  "roperties\030\001 \001(\0132 .ml_metadata.UniformDis"
  "tribution\"Q\n\rspecification\022\024\n\020ArtifactTy"
  "peByID\020\000\022\025\n\021ExecutionTypeByID\020\001\022\023\n\017Conte"
  "xtTypeByID\020\002\"\226\003\n\tReadNodes\0228\n\016num_proper"
  "ties\030\001 \001(\0132 .ml_metadata.UniformDistribu"
  "tion\"\316\002\n\rspecification\022\021\n\rArtifactsByID\020"
  "\000\022\023\n\017ArtifactsByType\020\001\022\031\n\025ArtifactByType"
  "AndName\020\002\022\022\n\016ArtifactsByURI\020\003\022\026\n\022Artifac"
  "tsByContext\020\004\022\022\n\016ExecutionsByID\020\005\022\024\n\020Exe"
  "cutionsByType\020\006\022\032\n\026ExecutionByTypeAndNam"
  "e\020\007\022\027\n\023ExecutionsByContext\020\010\022\020\n\014Contexts"
  "ByID\020\t\022\022\n\016ContextsByType\020\n\022\030\n\024ContextByT"
  "ypeAndName\020\013\022\026\n\022ContextsByArtifact\020\014\022\027\n\023"
  "ContextsByExecution\020\r\"\323\001\n\tReadEdges\022@\n\027b"
  "ipartite_distribution1\030\001 \001(\0132\037.ml_metada"
  "ta.NormalDistribution\022@\n\027bipartite_distr"
  "ibution2\030\002 \001(\0132\037.ml_metadata.NormalDistr"
  "ibution\"B\n\rspecification\022\030\n\024EventsByExec"
  "utionIDs\020\000\022\027\n\023EventsByArtifactIDs\020\001\"\331\002\n\010"
  "Workload\022,\n\ninit_store\030\001 \001(\0132\026.ml_metada"
  "ta.InitStoreH\000\022,\n\nfill_types\030\002 \001(\0132\026.ml_"
  "metadata.FillTypesH\000\022,\n\nfill_nodes\030\003 \001(\013"
  "2\026.ml_metadata.FillNodesH\000\022,\n\nfill_edges"
  "\030\004 \001(\0132\026.ml_metadata.FillEdgesH\000\022,\n\nread"
  "_types\030\005 \001(\0132\026.ml_metadata.ReadTypesH\000\022,"
  "\n\nread_nodes\030\006 \001(\0132\026.ml_metadata.ReadNod"
  "esH\000\022,\n\nread_edges\030\007 \001(\0132\026.ml_metadata.R"
  "eadEdgesH\000B\013\n\tworkloads\"\037\n\tThreadEnv\022\022\n\n"
  "thread_num\030\001 \001(\005\"A\n\017MLMDBenchReport\022.\n\ts"
  "ummaries\030\001 \003(\0132\033.ml_metadata.WorkloadRes"
  "ult\"o\n\016WorkloadResult\022\'\n\010workload\030\001 \001(\0132"
  "\025.ml_metadata.Workload\022\032\n\022microsecond_pe"
  "r_op\030\002 \001(\001\022\030\n\020bytes_per_second\030\003 \001(\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_metadata_5fbench_2eproto_deps[1] = {
  &::descriptor_table_metadata_5fstore_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_metadata_5fbench_2eproto_sccs[14] = {
  &scc_info_FillEdges_metadata_5fbench_2eproto.base,
  &scc_info_FillNodes_metadata_5fbench_2eproto.base,
  &scc_info_FillTypes_metadata_5fbench_2eproto.base,
  &scc_info_InitStore_metadata_5fbench_2eproto.base,
  &scc_info_MLMDBenchConfig_metadata_5fbench_2eproto.base,
  &scc_info_MLMDBenchReport_metadata_5fbench_2eproto.base,
  &scc_info_NormalDistribution_metadata_5fbench_2eproto.base,
  &scc_info_ReadEdges_metadata_5fbench_2eproto.base,
  &scc_info_ReadNodes_metadata_5fbench_2eproto.base,
  &scc_info_ReadTypes_metadata_5fbench_2eproto.base,
  &scc_info_ThreadEnv_metadata_5fbench_2eproto.base,
  &scc_info_UniformDistribution_metadata_5fbench_2eproto.base,
  &scc_info_Workload_metadata_5fbench_2eproto.base,
  &scc_info_WorkloadResult_metadata_5fbench_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_metadata_5fbench_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_5fbench_2eproto = {
  false, false, descriptor_table_protodef_metadata_5fbench_2eproto, "metadata_bench.proto", 2276,
  &descriptor_table_metadata_5fbench_2eproto_once, descriptor_table_metadata_5fbench_2eproto_sccs, descriptor_table_metadata_5fbench_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_metadata_5fbench_2eproto::offsets,
  file_level_metadata_metadata_5fbench_2eproto, 14, file_level_enum_descriptors_metadata_5fbench_2eproto, file_level_service_descriptors_metadata_5fbench_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_metadata_5fbench_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_metadata_5fbench_2eproto)), true);
namespace ml_metadata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillTypes_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[0];
}
bool FillTypes_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FillTypes_specification FillTypes::ArtifactType;
constexpr FillTypes_specification FillTypes::ExecutionType;
constexpr FillTypes_specification FillTypes::ContextType;
constexpr FillTypes_specification FillTypes::specification_MIN;
constexpr FillTypes_specification FillTypes::specification_MAX;
constexpr int FillTypes::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillNodes_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[1];
}
bool FillNodes_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FillNodes_specification FillNodes::Artifact;
constexpr FillNodes_specification FillNodes::Execution;
constexpr FillNodes_specification FillNodes::Context;
constexpr FillNodes_specification FillNodes::specification_MIN;
constexpr FillNodes_specification FillNodes::specification_MAX;
constexpr int FillNodes::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FillEdges_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[2];
}
bool FillEdges_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FillEdges_specification FillEdges::Event;
constexpr FillEdges_specification FillEdges::Attribution;
constexpr FillEdges_specification FillEdges::Association;
constexpr FillEdges_specification FillEdges::specification_MIN;
constexpr FillEdges_specification FillEdges::specification_MAX;
constexpr int FillEdges::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadTypes_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[3];
}
bool ReadTypes_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadTypes_specification ReadTypes::ArtifactTypeByID;
constexpr ReadTypes_specification ReadTypes::ExecutionTypeByID;
constexpr ReadTypes_specification ReadTypes::ContextTypeByID;
constexpr ReadTypes_specification ReadTypes::specification_MIN;
constexpr ReadTypes_specification ReadTypes::specification_MAX;
constexpr int ReadTypes::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadNodes_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[4];
}
bool ReadNodes_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadNodes_specification ReadNodes::ArtifactsByID;
constexpr ReadNodes_specification ReadNodes::ArtifactsByType;
constexpr ReadNodes_specification ReadNodes::ArtifactByTypeAndName;
constexpr ReadNodes_specification ReadNodes::ArtifactsByURI;
constexpr ReadNodes_specification ReadNodes::ArtifactsByContext;
constexpr ReadNodes_specification ReadNodes::ExecutionsByID;
constexpr ReadNodes_specification ReadNodes::ExecutionsByType;
constexpr ReadNodes_specification ReadNodes::ExecutionByTypeAndName;
constexpr ReadNodes_specification ReadNodes::ExecutionsByContext;
constexpr ReadNodes_specification ReadNodes::ContextsByID;
constexpr ReadNodes_specification ReadNodes::ContextsByType;
constexpr ReadNodes_specification ReadNodes::ContextByTypeAndName;
constexpr ReadNodes_specification ReadNodes::ContextsByArtifact;
constexpr ReadNodes_specification ReadNodes::ContextsByExecution;
constexpr ReadNodes_specification ReadNodes::specification_MIN;
constexpr ReadNodes_specification ReadNodes::specification_MAX;
constexpr int ReadNodes::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReadEdges_specification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fbench_2eproto);
  return file_level_enum_descriptors_metadata_5fbench_2eproto[5];
}
bool ReadEdges_specification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReadEdges_specification ReadEdges::EventsByExecutionIDs;
constexpr ReadEdges_specification ReadEdges::EventsByArtifactIDs;
constexpr ReadEdges_specification ReadEdges::specification_MIN;
constexpr ReadEdges_specification ReadEdges::specification_MAX;
constexpr int ReadEdges::specification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void MLMDBenchConfig::InitAsDefaultInstance() {
  ::ml_metadata::_MLMDBenchConfig_default_instance_._instance.get_mutable()->mlmd_config_ = const_cast< ::ml_metadata::ConnectionConfig*>(
      ::ml_metadata::ConnectionConfig::internal_default_instance());
  ::ml_metadata::_MLMDBenchConfig_default_instance_._instance.get_mutable()->thread_env_ = const_cast< ::ml_metadata::ThreadEnv*>(
      ::ml_metadata::ThreadEnv::internal_default_instance());
}
class MLMDBenchConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<MLMDBenchConfig>()._has_bits_);
  static const ::ml_metadata::ConnectionConfig& mlmd_config(const MLMDBenchConfig* msg);
  static void set_has_mlmd_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ml_metadata::ThreadEnv& thread_env(const MLMDBenchConfig* msg);
  static void set_has_thread_env(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::ConnectionConfig&
MLMDBenchConfig::_Internal::mlmd_config(const MLMDBenchConfig* msg) {
  return *msg->mlmd_config_;
}
const ::ml_metadata::ThreadEnv&
MLMDBenchConfig::_Internal::thread_env(const MLMDBenchConfig* msg) {
  return *msg->thread_env_;
}
void MLMDBenchConfig::clear_mlmd_config() {
  if (mlmd_config_ != nullptr) mlmd_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
MLMDBenchConfig::MLMDBenchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  workloads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MLMDBenchConfig)
}
MLMDBenchConfig::MLMDBenchConfig(const MLMDBenchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      workloads_(from.workloads_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mlmd_config()) {
    mlmd_config_ = new ::ml_metadata::ConnectionConfig(*from.mlmd_config_);
  } else {
    mlmd_config_ = nullptr;
  }
  if (from._internal_has_thread_env()) {
    thread_env_ = new ::ml_metadata::ThreadEnv(*from.thread_env_);
  } else {
    thread_env_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MLMDBenchConfig)
}

void MLMDBenchConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MLMDBenchConfig_metadata_5fbench_2eproto.base);
  ::memset(&mlmd_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thread_env_) -
      reinterpret_cast<char*>(&mlmd_config_)) + sizeof(thread_env_));
}

MLMDBenchConfig::~MLMDBenchConfig() {
  // @@protoc_insertion_point(destructor:ml_metadata.MLMDBenchConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MLMDBenchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mlmd_config_;
  if (this != internal_default_instance()) delete thread_env_;
}

void MLMDBenchConfig::ArenaDtor(void* object) {
  MLMDBenchConfig* _this = reinterpret_cast< MLMDBenchConfig* >(object);
  (void)_this;
}
void MLMDBenchConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MLMDBenchConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MLMDBenchConfig& MLMDBenchConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MLMDBenchConfig_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void MLMDBenchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MLMDBenchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workloads_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(mlmd_config_ != nullptr);
      mlmd_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(thread_env_ != nullptr);
      thread_env_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MLMDBenchConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mlmd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ml_metadata.Workload workloads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_workloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ml_metadata.ThreadEnv thread_env = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_thread_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MLMDBenchConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MLMDBenchConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mlmd_config(this), target, stream);
  }

  // repeated .ml_metadata.Workload workloads = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_workloads_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_workloads(i), target, stream);
  }

  // optional .ml_metadata.ThreadEnv thread_env = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::thread_env(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MLMDBenchConfig)
  return target;
}

size_t MLMDBenchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MLMDBenchConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.Workload workloads = 2;
  total_size += 1UL * this->_internal_workloads_size();
  for (const auto& msg : this->workloads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mlmd_config_);
    }

    // optional .ml_metadata.ThreadEnv thread_env = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *thread_env_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MLMDBenchConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.MLMDBenchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MLMDBenchConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MLMDBenchConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.MLMDBenchConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.MLMDBenchConfig)
    MergeFrom(*source);
  }
}

void MLMDBenchConfig::MergeFrom(const MLMDBenchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MLMDBenchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workloads_.MergeFrom(from.workloads_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_mlmd_config()->::ml_metadata::ConnectionConfig::MergeFrom(from._internal_mlmd_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_thread_env()->::ml_metadata::ThreadEnv::MergeFrom(from._internal_thread_env());
    }
  }
}

void MLMDBenchConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.MLMDBenchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLMDBenchConfig::CopyFrom(const MLMDBenchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MLMDBenchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLMDBenchConfig::IsInitialized() const {
  return true;
}

void MLMDBenchConfig::InternalSwap(MLMDBenchConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  workloads_.InternalSwap(&other->workloads_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLMDBenchConfig, thread_env_)
      + sizeof(MLMDBenchConfig::thread_env_)
      - PROTOBUF_FIELD_OFFSET(MLMDBenchConfig, mlmd_config_)>(
          reinterpret_cast<char*>(&mlmd_config_),
          reinterpret_cast<char*>(&other->mlmd_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MLMDBenchConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UniformDistribution::InitAsDefaultInstance() {
}
class UniformDistribution::_Internal {
 public:
  using HasBits = decltype(std::declval<UniformDistribution>()._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

UniformDistribution::UniformDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.UniformDistribution)
}
UniformDistribution::UniformDistribution(const UniformDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&range_begin_, &from.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&range_end_) -
    reinterpret_cast<char*>(&range_begin_)) + sizeof(range_end_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.UniformDistribution)
}

void UniformDistribution::SharedCtor() {
  range_begin_ = 1;
  range_end_ = 10;
}

UniformDistribution::~UniformDistribution() {
  // @@protoc_insertion_point(destructor:ml_metadata.UniformDistribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UniformDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UniformDistribution::ArenaDtor(void* object) {
  UniformDistribution* _this = reinterpret_cast< UniformDistribution* >(object);
  (void)_this;
}
void UniformDistribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UniformDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UniformDistribution& UniformDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UniformDistribution_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void UniformDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.UniformDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    range_begin_ = 1;
    range_end_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UniformDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 range_begin = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 range_end = 2 [default = 10];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UniformDistribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.UniformDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 range_begin = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional int32 range_end = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.UniformDistribution)
  return target;
}

size_t UniformDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.UniformDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 range_begin = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range_begin());
    }

    // optional int32 range_end = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_range_end());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UniformDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.UniformDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const UniformDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UniformDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.UniformDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.UniformDistribution)
    MergeFrom(*source);
  }
}

void UniformDistribution::MergeFrom(const UniformDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.UniformDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      range_begin_ = from.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      range_end_ = from.range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UniformDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.UniformDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniformDistribution::CopyFrom(const UniformDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.UniformDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniformDistribution::IsInitialized() const {
  return true;
}

void UniformDistribution::InternalSwap(UniformDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(range_begin_, other->range_begin_);
  swap(range_end_, other->range_end_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UniformDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NormalDistribution::InitAsDefaultInstance() {
}
class NormalDistribution::_Internal {
 public:
  using HasBits = decltype(std::declval<NormalDistribution>()._has_bits_);
  static void set_has_coefficient_of_variation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

NormalDistribution::NormalDistribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.NormalDistribution)
}
NormalDistribution::NormalDistribution(const NormalDistribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  coefficient_of_variation_ = from.coefficient_of_variation_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.NormalDistribution)
}

void NormalDistribution::SharedCtor() {
  coefficient_of_variation_ = 5;
}

NormalDistribution::~NormalDistribution() {
  // @@protoc_insertion_point(destructor:ml_metadata.NormalDistribution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NormalDistribution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NormalDistribution::ArenaDtor(void* object) {
  NormalDistribution* _this = reinterpret_cast< NormalDistribution* >(object);
  (void)_this;
}
void NormalDistribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NormalDistribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NormalDistribution& NormalDistribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NormalDistribution_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void NormalDistribution::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.NormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coefficient_of_variation_ = 5;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NormalDistribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 coefficient_of_variation = 1 [default = 5];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_coefficient_of_variation(&has_bits);
          coefficient_of_variation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NormalDistribution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.NormalDistribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 coefficient_of_variation = 1 [default = 5];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_coefficient_of_variation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.NormalDistribution)
  return target;
}

size_t NormalDistribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.NormalDistribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 coefficient_of_variation = 1 [default = 5];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coefficient_of_variation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NormalDistribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalDistribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NormalDistribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.NormalDistribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.NormalDistribution)
    MergeFrom(*source);
  }
}

void NormalDistribution::MergeFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.NormalDistribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_coefficient_of_variation()) {
    _internal_set_coefficient_of_variation(from._internal_coefficient_of_variation());
  }
}

void NormalDistribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalDistribution::CopyFrom(const NormalDistribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.NormalDistribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalDistribution::IsInitialized() const {
  return true;
}

void NormalDistribution::InternalSwap(NormalDistribution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(coefficient_of_variation_, other->coefficient_of_variation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NormalDistribution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitStore::InitAsDefaultInstance() {
  ::ml_metadata::_InitStore_default_instance_._instance.get_mutable()->mlmd_config_ = const_cast< ::ml_metadata::ConnectionConfig*>(
      ::ml_metadata::ConnectionConfig::internal_default_instance());
}
class InitStore::_Internal {
 public:
  using HasBits = decltype(std::declval<InitStore>()._has_bits_);
  static const ::ml_metadata::ConnectionConfig& mlmd_config(const InitStore* msg);
  static void set_has_mlmd_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::ConnectionConfig&
InitStore::_Internal::mlmd_config(const InitStore* msg) {
  return *msg->mlmd_config_;
}
void InitStore::clear_mlmd_config() {
  if (mlmd_config_ != nullptr) mlmd_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
InitStore::InitStore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.InitStore)
}
InitStore::InitStore(const InitStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mlmd_config()) {
    mlmd_config_ = new ::ml_metadata::ConnectionConfig(*from.mlmd_config_);
  } else {
    mlmd_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.InitStore)
}

void InitStore::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitStore_metadata_5fbench_2eproto.base);
  mlmd_config_ = nullptr;
}

InitStore::~InitStore() {
  // @@protoc_insertion_point(destructor:ml_metadata.InitStore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitStore::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mlmd_config_;
}

void InitStore::ArenaDtor(void* object) {
  InitStore* _this = reinterpret_cast< InitStore* >(object);
  (void)_this;
}
void InitStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitStore& InitStore::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitStore_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void InitStore::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.InitStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(mlmd_config_ != nullptr);
    mlmd_config_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mlmd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitStore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.InitStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mlmd_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.InitStore)
  return target;
}

size_t InitStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.InitStore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ml_metadata.ConnectionConfig mlmd_config = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mlmd_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitStore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.InitStore)
  GOOGLE_DCHECK_NE(&from, this);
  const InitStore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitStore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.InitStore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.InitStore)
    MergeFrom(*source);
  }
}

void InitStore::MergeFrom(const InitStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.InitStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mlmd_config()) {
    _internal_mutable_mlmd_config()->::ml_metadata::ConnectionConfig::MergeFrom(from._internal_mlmd_config());
  }
}

void InitStore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.InitStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitStore::CopyFrom(const InitStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.InitStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitStore::IsInitialized() const {
  return true;
}

void InitStore::InternalSwap(InitStore* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(mlmd_config_, other->mlmd_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitStore::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FillTypes::InitAsDefaultInstance() {
  ::ml_metadata::_FillTypes_default_instance_._instance.get_mutable()->num_properties_ = const_cast< ::ml_metadata::UniformDistribution*>(
      ::ml_metadata::UniformDistribution::internal_default_instance());
}
class FillTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<FillTypes>()._has_bits_);
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ml_metadata::UniformDistribution& num_properties(const FillTypes* msg);
  static void set_has_num_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::UniformDistribution&
FillTypes::_Internal::num_properties(const FillTypes* msg) {
  return *msg->num_properties_;
}
FillTypes::FillTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.FillTypes)
}
FillTypes::FillTypes(const FillTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num_properties()) {
    num_properties_ = new ::ml_metadata::UniformDistribution(*from.num_properties_);
  } else {
    num_properties_ = nullptr;
  }
  update_ = from.update_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.FillTypes)
}

void FillTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FillTypes_metadata_5fbench_2eproto.base);
  ::memset(&num_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&num_properties_)) + sizeof(update_));
}

FillTypes::~FillTypes() {
  // @@protoc_insertion_point(destructor:ml_metadata.FillTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FillTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_properties_;
}

void FillTypes::ArenaDtor(void* object) {
  FillTypes* _this = reinterpret_cast< FillTypes* >(object);
  (void)_this;
}
void FillTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FillTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FillTypes& FillTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FillTypes_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void FillTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.FillTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(num_properties_ != nullptr);
    num_properties_->Clear();
  }
  update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool update = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_update(&has_bits);
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ml_metadata.UniformDistribution num_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FillTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.FillTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update(), target);
  }

  // optional .ml_metadata.UniformDistribution num_properties = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::num_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.FillTypes)
  return target;
}

size_t FillTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.FillTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.UniformDistribution num_properties = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_properties_);
    }

    // optional bool update = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.FillTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const FillTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FillTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.FillTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.FillTypes)
    MergeFrom(*source);
  }
}

void FillTypes::MergeFrom(const FillTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.FillTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_num_properties()->::ml_metadata::UniformDistribution::MergeFrom(from._internal_num_properties());
    }
    if (cached_has_bits & 0x00000002u) {
      update_ = from.update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FillTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.FillTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillTypes::CopyFrom(const FillTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.FillTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillTypes::IsInitialized() const {
  return true;
}

void FillTypes::InternalSwap(FillTypes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillTypes, update_)
      + sizeof(FillTypes::update_)
      - PROTOBUF_FIELD_OFFSET(FillTypes, num_properties_)>(
          reinterpret_cast<char*>(&num_properties_),
          reinterpret_cast<char*>(&other->num_properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FillTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FillNodes::InitAsDefaultInstance() {
  ::ml_metadata::_FillNodes_default_instance_._instance.get_mutable()->num_properties_ = const_cast< ::ml_metadata::UniformDistribution*>(
      ::ml_metadata::UniformDistribution::internal_default_instance());
}
class FillNodes::_Internal {
 public:
  using HasBits = decltype(std::declval<FillNodes>()._has_bits_);
  static void set_has_update(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ml_metadata::UniformDistribution& num_properties(const FillNodes* msg);
  static void set_has_num_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::UniformDistribution&
FillNodes::_Internal::num_properties(const FillNodes* msg) {
  return *msg->num_properties_;
}
FillNodes::FillNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.FillNodes)
}
FillNodes::FillNodes(const FillNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num_properties()) {
    num_properties_ = new ::ml_metadata::UniformDistribution(*from.num_properties_);
  } else {
    num_properties_ = nullptr;
  }
  update_ = from.update_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.FillNodes)
}

void FillNodes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FillNodes_metadata_5fbench_2eproto.base);
  ::memset(&num_properties_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&num_properties_)) + sizeof(update_));
}

FillNodes::~FillNodes() {
  // @@protoc_insertion_point(destructor:ml_metadata.FillNodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FillNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_properties_;
}

void FillNodes::ArenaDtor(void* object) {
  FillNodes* _this = reinterpret_cast< FillNodes* >(object);
  (void)_this;
}
void FillNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FillNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FillNodes& FillNodes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FillNodes_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void FillNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.FillNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(num_properties_ != nullptr);
    num_properties_->Clear();
  }
  update_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool update = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_update(&has_bits);
          update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ml_metadata.UniformDistribution num_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FillNodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.FillNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool update = 1 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_update(), target);
  }

  // optional .ml_metadata.UniformDistribution num_properties = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::num_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.FillNodes)
  return target;
}

size_t FillNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.FillNodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.UniformDistribution num_properties = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *num_properties_);
    }

    // optional bool update = 1 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillNodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.FillNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const FillNodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FillNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.FillNodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.FillNodes)
    MergeFrom(*source);
  }
}

void FillNodes::MergeFrom(const FillNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.FillNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_num_properties()->::ml_metadata::UniformDistribution::MergeFrom(from._internal_num_properties());
    }
    if (cached_has_bits & 0x00000002u) {
      update_ = from.update_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FillNodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.FillNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillNodes::CopyFrom(const FillNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.FillNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillNodes::IsInitialized() const {
  return true;
}

void FillNodes::InternalSwap(FillNodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillNodes, update_)
      + sizeof(FillNodes::update_)
      - PROTOBUF_FIELD_OFFSET(FillNodes, num_properties_)>(
          reinterpret_cast<char*>(&num_properties_),
          reinterpret_cast<char*>(&other->num_properties_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FillNodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FillEdges::InitAsDefaultInstance() {
  ::ml_metadata::_FillEdges_default_instance_._instance.get_mutable()->bipartite_distribution1_ = const_cast< ::ml_metadata::NormalDistribution*>(
      ::ml_metadata::NormalDistribution::internal_default_instance());
  ::ml_metadata::_FillEdges_default_instance_._instance.get_mutable()->bipartite_distribution2_ = const_cast< ::ml_metadata::NormalDistribution*>(
      ::ml_metadata::NormalDistribution::internal_default_instance());
}
class FillEdges::_Internal {
 public:
  using HasBits = decltype(std::declval<FillEdges>()._has_bits_);
  static const ::ml_metadata::NormalDistribution& bipartite_distribution1(const FillEdges* msg);
  static void set_has_bipartite_distribution1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ml_metadata::NormalDistribution& bipartite_distribution2(const FillEdges* msg);
  static void set_has_bipartite_distribution2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::NormalDistribution&
FillEdges::_Internal::bipartite_distribution1(const FillEdges* msg) {
  return *msg->bipartite_distribution1_;
}
const ::ml_metadata::NormalDistribution&
FillEdges::_Internal::bipartite_distribution2(const FillEdges* msg) {
  return *msg->bipartite_distribution2_;
}
FillEdges::FillEdges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.FillEdges)
}
FillEdges::FillEdges(const FillEdges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bipartite_distribution1()) {
    bipartite_distribution1_ = new ::ml_metadata::NormalDistribution(*from.bipartite_distribution1_);
  } else {
    bipartite_distribution1_ = nullptr;
  }
  if (from._internal_has_bipartite_distribution2()) {
    bipartite_distribution2_ = new ::ml_metadata::NormalDistribution(*from.bipartite_distribution2_);
  } else {
    bipartite_distribution2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.FillEdges)
}

void FillEdges::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FillEdges_metadata_5fbench_2eproto.base);
  ::memset(&bipartite_distribution1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bipartite_distribution2_) -
      reinterpret_cast<char*>(&bipartite_distribution1_)) + sizeof(bipartite_distribution2_));
}

FillEdges::~FillEdges() {
  // @@protoc_insertion_point(destructor:ml_metadata.FillEdges)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FillEdges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bipartite_distribution1_;
  if (this != internal_default_instance()) delete bipartite_distribution2_;
}

void FillEdges::ArenaDtor(void* object) {
  FillEdges* _this = reinterpret_cast< FillEdges* >(object);
  (void)_this;
}
void FillEdges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FillEdges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FillEdges& FillEdges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FillEdges_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void FillEdges::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.FillEdges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bipartite_distribution1_ != nullptr);
      bipartite_distribution1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bipartite_distribution2_ != nullptr);
      bipartite_distribution2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FillEdges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bipartite_distribution1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bipartite_distribution2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FillEdges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.FillEdges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bipartite_distribution1(this), target, stream);
  }

  // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bipartite_distribution2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.FillEdges)
  return target;
}

size_t FillEdges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.FillEdges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bipartite_distribution1_);
    }

    // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bipartite_distribution2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FillEdges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.FillEdges)
  GOOGLE_DCHECK_NE(&from, this);
  const FillEdges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FillEdges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.FillEdges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.FillEdges)
    MergeFrom(*source);
  }
}

void FillEdges::MergeFrom(const FillEdges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.FillEdges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bipartite_distribution1()->::ml_metadata::NormalDistribution::MergeFrom(from._internal_bipartite_distribution1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bipartite_distribution2()->::ml_metadata::NormalDistribution::MergeFrom(from._internal_bipartite_distribution2());
    }
  }
}

void FillEdges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.FillEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FillEdges::CopyFrom(const FillEdges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.FillEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FillEdges::IsInitialized() const {
  return true;
}

void FillEdges::InternalSwap(FillEdges* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FillEdges, bipartite_distribution2_)
      + sizeof(FillEdges::bipartite_distribution2_)
      - PROTOBUF_FIELD_OFFSET(FillEdges, bipartite_distribution1_)>(
          reinterpret_cast<char*>(&bipartite_distribution1_),
          reinterpret_cast<char*>(&other->bipartite_distribution1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FillEdges::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadTypes::InitAsDefaultInstance() {
  ::ml_metadata::_ReadTypes_default_instance_._instance.get_mutable()->num_properties_ = const_cast< ::ml_metadata::UniformDistribution*>(
      ::ml_metadata::UniformDistribution::internal_default_instance());
}
class ReadTypes::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadTypes>()._has_bits_);
  static const ::ml_metadata::UniformDistribution& num_properties(const ReadTypes* msg);
  static void set_has_num_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::UniformDistribution&
ReadTypes::_Internal::num_properties(const ReadTypes* msg) {
  return *msg->num_properties_;
}
ReadTypes::ReadTypes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ReadTypes)
}
ReadTypes::ReadTypes(const ReadTypes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num_properties()) {
    num_properties_ = new ::ml_metadata::UniformDistribution(*from.num_properties_);
  } else {
    num_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ReadTypes)
}

void ReadTypes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadTypes_metadata_5fbench_2eproto.base);
  num_properties_ = nullptr;
}

ReadTypes::~ReadTypes() {
  // @@protoc_insertion_point(destructor:ml_metadata.ReadTypes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadTypes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_properties_;
}

void ReadTypes::ArenaDtor(void* object) {
  ReadTypes* _this = reinterpret_cast< ReadTypes* >(object);
  (void)_this;
}
void ReadTypes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadTypes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadTypes& ReadTypes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadTypes_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void ReadTypes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ReadTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(num_properties_ != nullptr);
    num_properties_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadTypes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.UniformDistribution num_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadTypes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ReadTypes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.UniformDistribution num_properties = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::num_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ReadTypes)
  return target;
}

size_t ReadTypes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ReadTypes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ml_metadata.UniformDistribution num_properties = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadTypes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.ReadTypes)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadTypes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadTypes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.ReadTypes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.ReadTypes)
    MergeFrom(*source);
  }
}

void ReadTypes::MergeFrom(const ReadTypes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ReadTypes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_properties()) {
    _internal_mutable_num_properties()->::ml_metadata::UniformDistribution::MergeFrom(from._internal_num_properties());
  }
}

void ReadTypes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.ReadTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadTypes::CopyFrom(const ReadTypes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ReadTypes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadTypes::IsInitialized() const {
  return true;
}

void ReadTypes::InternalSwap(ReadTypes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_properties_, other->num_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadTypes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadNodes::InitAsDefaultInstance() {
  ::ml_metadata::_ReadNodes_default_instance_._instance.get_mutable()->num_properties_ = const_cast< ::ml_metadata::UniformDistribution*>(
      ::ml_metadata::UniformDistribution::internal_default_instance());
}
class ReadNodes::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadNodes>()._has_bits_);
  static const ::ml_metadata::UniformDistribution& num_properties(const ReadNodes* msg);
  static void set_has_num_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::ml_metadata::UniformDistribution&
ReadNodes::_Internal::num_properties(const ReadNodes* msg) {
  return *msg->num_properties_;
}
ReadNodes::ReadNodes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ReadNodes)
}
ReadNodes::ReadNodes(const ReadNodes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_num_properties()) {
    num_properties_ = new ::ml_metadata::UniformDistribution(*from.num_properties_);
  } else {
    num_properties_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ReadNodes)
}

void ReadNodes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadNodes_metadata_5fbench_2eproto.base);
  num_properties_ = nullptr;
}

ReadNodes::~ReadNodes() {
  // @@protoc_insertion_point(destructor:ml_metadata.ReadNodes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadNodes::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete num_properties_;
}

void ReadNodes::ArenaDtor(void* object) {
  ReadNodes* _this = reinterpret_cast< ReadNodes* >(object);
  (void)_this;
}
void ReadNodes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadNodes& ReadNodes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadNodes_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void ReadNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ReadNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(num_properties_ != nullptr);
    num_properties_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadNodes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.UniformDistribution num_properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_num_properties(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadNodes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ReadNodes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.UniformDistribution num_properties = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::num_properties(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ReadNodes)
  return target;
}

size_t ReadNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ReadNodes)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .ml_metadata.UniformDistribution num_properties = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *num_properties_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadNodes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.ReadNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadNodes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.ReadNodes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.ReadNodes)
    MergeFrom(*source);
  }
}

void ReadNodes::MergeFrom(const ReadNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ReadNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_num_properties()) {
    _internal_mutable_num_properties()->::ml_metadata::UniformDistribution::MergeFrom(from._internal_num_properties());
  }
}

void ReadNodes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.ReadNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadNodes::CopyFrom(const ReadNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ReadNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadNodes::IsInitialized() const {
  return true;
}

void ReadNodes::InternalSwap(ReadNodes* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(num_properties_, other->num_properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadNodes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadEdges::InitAsDefaultInstance() {
  ::ml_metadata::_ReadEdges_default_instance_._instance.get_mutable()->bipartite_distribution1_ = const_cast< ::ml_metadata::NormalDistribution*>(
      ::ml_metadata::NormalDistribution::internal_default_instance());
  ::ml_metadata::_ReadEdges_default_instance_._instance.get_mutable()->bipartite_distribution2_ = const_cast< ::ml_metadata::NormalDistribution*>(
      ::ml_metadata::NormalDistribution::internal_default_instance());
}
class ReadEdges::_Internal {
 public:
  using HasBits = decltype(std::declval<ReadEdges>()._has_bits_);
  static const ::ml_metadata::NormalDistribution& bipartite_distribution1(const ReadEdges* msg);
  static void set_has_bipartite_distribution1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ml_metadata::NormalDistribution& bipartite_distribution2(const ReadEdges* msg);
  static void set_has_bipartite_distribution2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::ml_metadata::NormalDistribution&
ReadEdges::_Internal::bipartite_distribution1(const ReadEdges* msg) {
  return *msg->bipartite_distribution1_;
}
const ::ml_metadata::NormalDistribution&
ReadEdges::_Internal::bipartite_distribution2(const ReadEdges* msg) {
  return *msg->bipartite_distribution2_;
}
ReadEdges::ReadEdges(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ReadEdges)
}
ReadEdges::ReadEdges(const ReadEdges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bipartite_distribution1()) {
    bipartite_distribution1_ = new ::ml_metadata::NormalDistribution(*from.bipartite_distribution1_);
  } else {
    bipartite_distribution1_ = nullptr;
  }
  if (from._internal_has_bipartite_distribution2()) {
    bipartite_distribution2_ = new ::ml_metadata::NormalDistribution(*from.bipartite_distribution2_);
  } else {
    bipartite_distribution2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ReadEdges)
}

void ReadEdges::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadEdges_metadata_5fbench_2eproto.base);
  ::memset(&bipartite_distribution1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bipartite_distribution2_) -
      reinterpret_cast<char*>(&bipartite_distribution1_)) + sizeof(bipartite_distribution2_));
}

ReadEdges::~ReadEdges() {
  // @@protoc_insertion_point(destructor:ml_metadata.ReadEdges)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReadEdges::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bipartite_distribution1_;
  if (this != internal_default_instance()) delete bipartite_distribution2_;
}

void ReadEdges::ArenaDtor(void* object) {
  ReadEdges* _this = reinterpret_cast< ReadEdges* >(object);
  (void)_this;
}
void ReadEdges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReadEdges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadEdges& ReadEdges::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadEdges_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void ReadEdges::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ReadEdges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(bipartite_distribution1_ != nullptr);
      bipartite_distribution1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bipartite_distribution2_ != nullptr);
      bipartite_distribution2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReadEdges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_bipartite_distribution1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bipartite_distribution2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadEdges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ReadEdges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::bipartite_distribution1(this), target, stream);
  }

  // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bipartite_distribution2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ReadEdges)
  return target;
}

size_t ReadEdges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ReadEdges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ml_metadata.NormalDistribution bipartite_distribution1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bipartite_distribution1_);
    }

    // optional .ml_metadata.NormalDistribution bipartite_distribution2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bipartite_distribution2_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadEdges::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.ReadEdges)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadEdges* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadEdges>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.ReadEdges)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.ReadEdges)
    MergeFrom(*source);
  }
}

void ReadEdges::MergeFrom(const ReadEdges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ReadEdges)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_bipartite_distribution1()->::ml_metadata::NormalDistribution::MergeFrom(from._internal_bipartite_distribution1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_bipartite_distribution2()->::ml_metadata::NormalDistribution::MergeFrom(from._internal_bipartite_distribution2());
    }
  }
}

void ReadEdges::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.ReadEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadEdges::CopyFrom(const ReadEdges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ReadEdges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadEdges::IsInitialized() const {
  return true;
}

void ReadEdges::InternalSwap(ReadEdges* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReadEdges, bipartite_distribution2_)
      + sizeof(ReadEdges::bipartite_distribution2_)
      - PROTOBUF_FIELD_OFFSET(ReadEdges, bipartite_distribution1_)>(
          reinterpret_cast<char*>(&bipartite_distribution1_),
          reinterpret_cast<char*>(&other->bipartite_distribution1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadEdges::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Workload::InitAsDefaultInstance() {
  ::ml_metadata::_Workload_default_instance_.init_store_ = const_cast< ::ml_metadata::InitStore*>(
      ::ml_metadata::InitStore::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.fill_types_ = const_cast< ::ml_metadata::FillTypes*>(
      ::ml_metadata::FillTypes::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.fill_nodes_ = const_cast< ::ml_metadata::FillNodes*>(
      ::ml_metadata::FillNodes::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.fill_edges_ = const_cast< ::ml_metadata::FillEdges*>(
      ::ml_metadata::FillEdges::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.read_types_ = const_cast< ::ml_metadata::ReadTypes*>(
      ::ml_metadata::ReadTypes::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.read_nodes_ = const_cast< ::ml_metadata::ReadNodes*>(
      ::ml_metadata::ReadNodes::internal_default_instance());
  ::ml_metadata::_Workload_default_instance_.read_edges_ = const_cast< ::ml_metadata::ReadEdges*>(
      ::ml_metadata::ReadEdges::internal_default_instance());
}
class Workload::_Internal {
 public:
  static const ::ml_metadata::InitStore& init_store(const Workload* msg);
  static const ::ml_metadata::FillTypes& fill_types(const Workload* msg);
  static const ::ml_metadata::FillNodes& fill_nodes(const Workload* msg);
  static const ::ml_metadata::FillEdges& fill_edges(const Workload* msg);
  static const ::ml_metadata::ReadTypes& read_types(const Workload* msg);
  static const ::ml_metadata::ReadNodes& read_nodes(const Workload* msg);
  static const ::ml_metadata::ReadEdges& read_edges(const Workload* msg);
};

const ::ml_metadata::InitStore&
Workload::_Internal::init_store(const Workload* msg) {
  return *msg->workloads_.init_store_;
}
const ::ml_metadata::FillTypes&
Workload::_Internal::fill_types(const Workload* msg) {
  return *msg->workloads_.fill_types_;
}
const ::ml_metadata::FillNodes&
Workload::_Internal::fill_nodes(const Workload* msg) {
  return *msg->workloads_.fill_nodes_;
}
const ::ml_metadata::FillEdges&
Workload::_Internal::fill_edges(const Workload* msg) {
  return *msg->workloads_.fill_edges_;
}
const ::ml_metadata::ReadTypes&
Workload::_Internal::read_types(const Workload* msg) {
  return *msg->workloads_.read_types_;
}
const ::ml_metadata::ReadNodes&
Workload::_Internal::read_nodes(const Workload* msg) {
  return *msg->workloads_.read_nodes_;
}
const ::ml_metadata::ReadEdges&
Workload::_Internal::read_edges(const Workload* msg) {
  return *msg->workloads_.read_edges_;
}
void Workload::set_allocated_init_store(::ml_metadata::InitStore* init_store) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (init_store) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(init_store);
    if (message_arena != submessage_arena) {
      init_store = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init_store, submessage_arena);
    }
    set_has_init_store();
    workloads_.init_store_ = init_store;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.init_store)
}
void Workload::set_allocated_fill_types(::ml_metadata::FillTypes* fill_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (fill_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fill_types);
    if (message_arena != submessage_arena) {
      fill_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_types, submessage_arena);
    }
    set_has_fill_types();
    workloads_.fill_types_ = fill_types;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.fill_types)
}
void Workload::set_allocated_fill_nodes(::ml_metadata::FillNodes* fill_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (fill_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fill_nodes);
    if (message_arena != submessage_arena) {
      fill_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_nodes, submessage_arena);
    }
    set_has_fill_nodes();
    workloads_.fill_nodes_ = fill_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.fill_nodes)
}
void Workload::set_allocated_fill_edges(::ml_metadata::FillEdges* fill_edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (fill_edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(fill_edges);
    if (message_arena != submessage_arena) {
      fill_edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fill_edges, submessage_arena);
    }
    set_has_fill_edges();
    workloads_.fill_edges_ = fill_edges;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.fill_edges)
}
void Workload::set_allocated_read_types(::ml_metadata::ReadTypes* read_types) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (read_types) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read_types);
    if (message_arena != submessage_arena) {
      read_types = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_types, submessage_arena);
    }
    set_has_read_types();
    workloads_.read_types_ = read_types;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.read_types)
}
void Workload::set_allocated_read_nodes(::ml_metadata::ReadNodes* read_nodes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (read_nodes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read_nodes);
    if (message_arena != submessage_arena) {
      read_nodes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_nodes, submessage_arena);
    }
    set_has_read_nodes();
    workloads_.read_nodes_ = read_nodes;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.read_nodes)
}
void Workload::set_allocated_read_edges(::ml_metadata::ReadEdges* read_edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_workloads();
  if (read_edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(read_edges);
    if (message_arena != submessage_arena) {
      read_edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_edges, submessage_arena);
    }
    set_has_read_edges();
    workloads_.read_edges_ = read_edges;
  }
  // @@protoc_insertion_point(field_set_allocated:ml_metadata.Workload.read_edges)
}
Workload::Workload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.Workload)
}
Workload::Workload(const Workload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_workloads();
  switch (from.workloads_case()) {
    case kInitStore: {
      _internal_mutable_init_store()->::ml_metadata::InitStore::MergeFrom(from._internal_init_store());
      break;
    }
    case kFillTypes: {
      _internal_mutable_fill_types()->::ml_metadata::FillTypes::MergeFrom(from._internal_fill_types());
      break;
    }
    case kFillNodes: {
      _internal_mutable_fill_nodes()->::ml_metadata::FillNodes::MergeFrom(from._internal_fill_nodes());
      break;
    }
    case kFillEdges: {
      _internal_mutable_fill_edges()->::ml_metadata::FillEdges::MergeFrom(from._internal_fill_edges());
      break;
    }
    case kReadTypes: {
      _internal_mutable_read_types()->::ml_metadata::ReadTypes::MergeFrom(from._internal_read_types());
      break;
    }
    case kReadNodes: {
      _internal_mutable_read_nodes()->::ml_metadata::ReadNodes::MergeFrom(from._internal_read_nodes());
      break;
    }
    case kReadEdges: {
      _internal_mutable_read_edges()->::ml_metadata::ReadEdges::MergeFrom(from._internal_read_edges());
      break;
    }
    case WORKLOADS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ml_metadata.Workload)
}

void Workload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Workload_metadata_5fbench_2eproto.base);
  clear_has_workloads();
}

Workload::~Workload() {
  // @@protoc_insertion_point(destructor:ml_metadata.Workload)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Workload::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_workloads()) {
    clear_workloads();
  }
}

void Workload::ArenaDtor(void* object) {
  Workload* _this = reinterpret_cast< Workload* >(object);
  (void)_this;
}
void Workload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Workload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Workload& Workload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Workload_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void Workload::clear_workloads() {
// @@protoc_insertion_point(one_of_clear_start:ml_metadata.Workload)
  switch (workloads_case()) {
    case kInitStore: {
      if (GetArena() == nullptr) {
        delete workloads_.init_store_;
      }
      break;
    }
    case kFillTypes: {
      if (GetArena() == nullptr) {
        delete workloads_.fill_types_;
      }
      break;
    }
    case kFillNodes: {
      if (GetArena() == nullptr) {
        delete workloads_.fill_nodes_;
      }
      break;
    }
    case kFillEdges: {
      if (GetArena() == nullptr) {
        delete workloads_.fill_edges_;
      }
      break;
    }
    case kReadTypes: {
      if (GetArena() == nullptr) {
        delete workloads_.read_types_;
      }
      break;
    }
    case kReadNodes: {
      if (GetArena() == nullptr) {
        delete workloads_.read_nodes_;
      }
      break;
    }
    case kReadEdges: {
      if (GetArena() == nullptr) {
        delete workloads_.read_edges_;
      }
      break;
    }
    case WORKLOADS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = WORKLOADS_NOT_SET;
}


void Workload::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.Workload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_workloads();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Workload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ml_metadata.InitStore init_store = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_init_store(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.FillTypes fill_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.FillNodes fill_nodes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.FillEdges fill_edges = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fill_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.ReadTypes read_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_types(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.ReadNodes read_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_nodes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ml_metadata.ReadEdges read_edges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_read_edges(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Workload::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.Workload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (workloads_case()) {
    case kInitStore: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::init_store(this), target, stream);
      break;
    }
    case kFillTypes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::fill_types(this), target, stream);
      break;
    }
    case kFillNodes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::fill_nodes(this), target, stream);
      break;
    }
    case kFillEdges: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::fill_edges(this), target, stream);
      break;
    }
    case kReadTypes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::read_types(this), target, stream);
      break;
    }
    case kReadNodes: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::read_nodes(this), target, stream);
      break;
    }
    case kReadEdges: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::read_edges(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.Workload)
  return target;
}

size_t Workload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.Workload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (workloads_case()) {
    // .ml_metadata.InitStore init_store = 1;
    case kInitStore: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.init_store_);
      break;
    }
    // .ml_metadata.FillTypes fill_types = 2;
    case kFillTypes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.fill_types_);
      break;
    }
    // .ml_metadata.FillNodes fill_nodes = 3;
    case kFillNodes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.fill_nodes_);
      break;
    }
    // .ml_metadata.FillEdges fill_edges = 4;
    case kFillEdges: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.fill_edges_);
      break;
    }
    // .ml_metadata.ReadTypes read_types = 5;
    case kReadTypes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.read_types_);
      break;
    }
    // .ml_metadata.ReadNodes read_nodes = 6;
    case kReadNodes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.read_nodes_);
      break;
    }
    // .ml_metadata.ReadEdges read_edges = 7;
    case kReadEdges: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workloads_.read_edges_);
      break;
    }
    case WORKLOADS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Workload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.Workload)
  GOOGLE_DCHECK_NE(&from, this);
  const Workload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Workload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.Workload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.Workload)
    MergeFrom(*source);
  }
}

void Workload::MergeFrom(const Workload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.Workload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.workloads_case()) {
    case kInitStore: {
      _internal_mutable_init_store()->::ml_metadata::InitStore::MergeFrom(from._internal_init_store());
      break;
    }
    case kFillTypes: {
      _internal_mutable_fill_types()->::ml_metadata::FillTypes::MergeFrom(from._internal_fill_types());
      break;
    }
    case kFillNodes: {
      _internal_mutable_fill_nodes()->::ml_metadata::FillNodes::MergeFrom(from._internal_fill_nodes());
      break;
    }
    case kFillEdges: {
      _internal_mutable_fill_edges()->::ml_metadata::FillEdges::MergeFrom(from._internal_fill_edges());
      break;
    }
    case kReadTypes: {
      _internal_mutable_read_types()->::ml_metadata::ReadTypes::MergeFrom(from._internal_read_types());
      break;
    }
    case kReadNodes: {
      _internal_mutable_read_nodes()->::ml_metadata::ReadNodes::MergeFrom(from._internal_read_nodes());
      break;
    }
    case kReadEdges: {
      _internal_mutable_read_edges()->::ml_metadata::ReadEdges::MergeFrom(from._internal_read_edges());
      break;
    }
    case WORKLOADS_NOT_SET: {
      break;
    }
  }
}

void Workload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.Workload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Workload::CopyFrom(const Workload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.Workload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Workload::IsInitialized() const {
  return true;
}

void Workload::InternalSwap(Workload* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(workloads_, other->workloads_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Workload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThreadEnv::InitAsDefaultInstance() {
}
class ThreadEnv::_Internal {
 public:
  using HasBits = decltype(std::declval<ThreadEnv>()._has_bits_);
  static void set_has_thread_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ThreadEnv::ThreadEnv(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.ThreadEnv)
}
ThreadEnv::ThreadEnv(const ThreadEnv& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  thread_num_ = from.thread_num_;
  // @@protoc_insertion_point(copy_constructor:ml_metadata.ThreadEnv)
}

void ThreadEnv::SharedCtor() {
  thread_num_ = 0;
}

ThreadEnv::~ThreadEnv() {
  // @@protoc_insertion_point(destructor:ml_metadata.ThreadEnv)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThreadEnv::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThreadEnv::ArenaDtor(void* object) {
  ThreadEnv* _this = reinterpret_cast< ThreadEnv* >(object);
  (void)_this;
}
void ThreadEnv::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThreadEnv::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThreadEnv& ThreadEnv::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThreadEnv_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void ThreadEnv::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.ThreadEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thread_num_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThreadEnv::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 thread_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_thread_num(&has_bits);
          thread_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThreadEnv::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.ThreadEnv)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 thread_num = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_thread_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.ThreadEnv)
  return target;
}

size_t ThreadEnv::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.ThreadEnv)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 thread_num = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_thread_num());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThreadEnv::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.ThreadEnv)
  GOOGLE_DCHECK_NE(&from, this);
  const ThreadEnv* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThreadEnv>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.ThreadEnv)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.ThreadEnv)
    MergeFrom(*source);
  }
}

void ThreadEnv::MergeFrom(const ThreadEnv& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.ThreadEnv)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_thread_num()) {
    _internal_set_thread_num(from._internal_thread_num());
  }
}

void ThreadEnv::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.ThreadEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThreadEnv::CopyFrom(const ThreadEnv& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.ThreadEnv)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThreadEnv::IsInitialized() const {
  return true;
}

void ThreadEnv::InternalSwap(ThreadEnv* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(thread_num_, other->thread_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThreadEnv::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MLMDBenchReport::InitAsDefaultInstance() {
}
class MLMDBenchReport::_Internal {
 public:
};

MLMDBenchReport::MLMDBenchReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  summaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.MLMDBenchReport)
}
MLMDBenchReport::MLMDBenchReport(const MLMDBenchReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ml_metadata.MLMDBenchReport)
}

void MLMDBenchReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MLMDBenchReport_metadata_5fbench_2eproto.base);
}

MLMDBenchReport::~MLMDBenchReport() {
  // @@protoc_insertion_point(destructor:ml_metadata.MLMDBenchReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MLMDBenchReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MLMDBenchReport::ArenaDtor(void* object) {
  MLMDBenchReport* _this = reinterpret_cast< MLMDBenchReport* >(object);
  (void)_this;
}
void MLMDBenchReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MLMDBenchReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MLMDBenchReport& MLMDBenchReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MLMDBenchReport_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void MLMDBenchReport::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.MLMDBenchReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summaries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MLMDBenchReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ml_metadata.WorkloadResult summaries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MLMDBenchReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.MLMDBenchReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ml_metadata.WorkloadResult summaries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_summaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.MLMDBenchReport)
  return target;
}

size_t MLMDBenchReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.MLMDBenchReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ml_metadata.WorkloadResult summaries = 1;
  total_size += 1UL * this->_internal_summaries_size();
  for (const auto& msg : this->summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MLMDBenchReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.MLMDBenchReport)
  GOOGLE_DCHECK_NE(&from, this);
  const MLMDBenchReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MLMDBenchReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.MLMDBenchReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.MLMDBenchReport)
    MergeFrom(*source);
  }
}

void MLMDBenchReport::MergeFrom(const MLMDBenchReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.MLMDBenchReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
}

void MLMDBenchReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.MLMDBenchReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MLMDBenchReport::CopyFrom(const MLMDBenchReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.MLMDBenchReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MLMDBenchReport::IsInitialized() const {
  return true;
}

void MLMDBenchReport::InternalSwap(MLMDBenchReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  summaries_.InternalSwap(&other->summaries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MLMDBenchReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorkloadResult::InitAsDefaultInstance() {
  ::ml_metadata::_WorkloadResult_default_instance_._instance.get_mutable()->workload_ = const_cast< ::ml_metadata::Workload*>(
      ::ml_metadata::Workload::internal_default_instance());
}
class WorkloadResult::_Internal {
 public:
  using HasBits = decltype(std::declval<WorkloadResult>()._has_bits_);
  static const ::ml_metadata::Workload& workload(const WorkloadResult* msg);
  static void set_has_workload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_microsecond_per_op(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bytes_per_second(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::ml_metadata::Workload&
WorkloadResult::_Internal::workload(const WorkloadResult* msg) {
  return *msg->workload_;
}
WorkloadResult::WorkloadResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ml_metadata.WorkloadResult)
}
WorkloadResult::WorkloadResult(const WorkloadResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_workload()) {
    workload_ = new ::ml_metadata::Workload(*from.workload_);
  } else {
    workload_ = nullptr;
  }
  ::memcpy(&microsecond_per_op_, &from.microsecond_per_op_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_per_second_) -
    reinterpret_cast<char*>(&microsecond_per_op_)) + sizeof(bytes_per_second_));
  // @@protoc_insertion_point(copy_constructor:ml_metadata.WorkloadResult)
}

void WorkloadResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorkloadResult_metadata_5fbench_2eproto.base);
  ::memset(&workload_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bytes_per_second_) -
      reinterpret_cast<char*>(&workload_)) + sizeof(bytes_per_second_));
}

WorkloadResult::~WorkloadResult() {
  // @@protoc_insertion_point(destructor:ml_metadata.WorkloadResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WorkloadResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete workload_;
}

void WorkloadResult::ArenaDtor(void* object) {
  WorkloadResult* _this = reinterpret_cast< WorkloadResult* >(object);
  (void)_this;
}
void WorkloadResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WorkloadResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorkloadResult& WorkloadResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorkloadResult_metadata_5fbench_2eproto.base);
  return *internal_default_instance();
}


void WorkloadResult::Clear() {
// @@protoc_insertion_point(message_clear_start:ml_metadata.WorkloadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(workload_ != nullptr);
    workload_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&microsecond_per_op_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_per_second_) -
        reinterpret_cast<char*>(&microsecond_per_op_)) + sizeof(bytes_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkloadResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ml_metadata.Workload workload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_workload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double microsecond_per_op = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_microsecond_per_op(&has_bits);
          microsecond_per_op_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double bytes_per_second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_bytes_per_second(&has_bits);
          bytes_per_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorkloadResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ml_metadata.WorkloadResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ml_metadata.Workload workload = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::workload(this), target, stream);
  }

  // optional double microsecond_per_op = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_microsecond_per_op(), target);
  }

  // optional double bytes_per_second = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_bytes_per_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ml_metadata.WorkloadResult)
  return target;
}

size_t WorkloadResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ml_metadata.WorkloadResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .ml_metadata.Workload workload = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *workload_);
    }

    // optional double microsecond_per_op = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double bytes_per_second = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorkloadResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ml_metadata.WorkloadResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkloadResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorkloadResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ml_metadata.WorkloadResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ml_metadata.WorkloadResult)
    MergeFrom(*source);
  }
}

void WorkloadResult::MergeFrom(const WorkloadResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ml_metadata.WorkloadResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_workload()->::ml_metadata::Workload::MergeFrom(from._internal_workload());
    }
    if (cached_has_bits & 0x00000002u) {
      microsecond_per_op_ = from.microsecond_per_op_;
    }
    if (cached_has_bits & 0x00000004u) {
      bytes_per_second_ = from.bytes_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkloadResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ml_metadata.WorkloadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkloadResult::CopyFrom(const WorkloadResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ml_metadata.WorkloadResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkloadResult::IsInitialized() const {
  return true;
}

void WorkloadResult::InternalSwap(WorkloadResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkloadResult, bytes_per_second_)
      + sizeof(WorkloadResult::bytes_per_second_)
      - PROTOBUF_FIELD_OFFSET(WorkloadResult, workload_)>(
          reinterpret_cast<char*>(&workload_),
          reinterpret_cast<char*>(&other->workload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkloadResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ml_metadata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ml_metadata::MLMDBenchConfig* Arena::CreateMaybeMessage< ::ml_metadata::MLMDBenchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MLMDBenchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::UniformDistribution* Arena::CreateMaybeMessage< ::ml_metadata::UniformDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::UniformDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::NormalDistribution* Arena::CreateMaybeMessage< ::ml_metadata::NormalDistribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::NormalDistribution >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::InitStore* Arena::CreateMaybeMessage< ::ml_metadata::InitStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::InitStore >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::FillTypes* Arena::CreateMaybeMessage< ::ml_metadata::FillTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::FillTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::FillNodes* Arena::CreateMaybeMessage< ::ml_metadata::FillNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::FillNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::FillEdges* Arena::CreateMaybeMessage< ::ml_metadata::FillEdges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::FillEdges >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ReadTypes* Arena::CreateMaybeMessage< ::ml_metadata::ReadTypes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ReadTypes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ReadNodes* Arena::CreateMaybeMessage< ::ml_metadata::ReadNodes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ReadNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ReadEdges* Arena::CreateMaybeMessage< ::ml_metadata::ReadEdges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ReadEdges >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::Workload* Arena::CreateMaybeMessage< ::ml_metadata::Workload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::Workload >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::ThreadEnv* Arena::CreateMaybeMessage< ::ml_metadata::ThreadEnv >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::ThreadEnv >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::MLMDBenchReport* Arena::CreateMaybeMessage< ::ml_metadata::MLMDBenchReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::MLMDBenchReport >(arena);
}
template<> PROTOBUF_NOINLINE ::ml_metadata::WorkloadResult* Arena::CreateMaybeMessage< ::ml_metadata::WorkloadResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ml_metadata::WorkloadResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
